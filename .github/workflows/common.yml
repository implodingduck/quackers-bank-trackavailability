# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
    id-token: write
    contents: read
    packages: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422
        with:
          cosign-release: 'v1.4.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ github.run_id }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ./qbtrackavailability/

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}


  terraform:
    #commenting out needs so its in parallel
    #needs: docker
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
  
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: 'Install Azure Function Core Tools'
        run: 'npm i -g azure-functions-core-tools@3'

      - name: HashiCorp - Setup Terraform
        # You may pin to the exact commit or the version.
        # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: latest

      - name: Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.KV_NAME }}
          secrets: 'container-name, resource-group-name, storage-account-name, subscription-id, ARM-TENANT-ID, ARM-CLIENT-ID, ARM-CLIENT-SECRET'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: kvAction

      - name: plan terraform
        env:
          ARM_CLIENT_ID: ${{ steps.kvAction.outputs.ARM-CLIENT-ID }}
          ARM_CLIENT_SECRET: ${{ steps.kvAction.outputs.ARM-CLIENT-SECRET }}
          ARM_TENANT_ID: ${{ steps.kvAction.outputs.ARM-TENANT-ID }}
          TF_VAR_container_name: ${{ steps.kvAction.outputs.container-name }}
          TF_VAR_resource_group_name: ${{ steps.kvAction.outputs.resource-group-name }}
          TF_VAR_storage_account_name: ${{ steps.kvAction.outputs.storage-account-name }}
          TF_VAR_subscription_id: ${{ steps.kvAction.outputs.subscription-id }}
          TF_VAR_key: ${{ github.repository }}.tfstate
          TF_VAR_gh_repo: ${{ github.repository }}
          TF_VAR_app_insights_name: ${{ secrets.APP_INSIGHTS_NAME}}
          TF_VAR_app_insights_rg: ${{ secrets.APP_INSIGHTS_RG }}
          TF_VAR_image_version: latest #${{ github.run_id }}
          
        run: |
            echo "starting..."
            cd terraform
            ./env_setup.sh
            terraform init --backend-config=backend.tfvars
            terraform plan -out theplan

      - name: apply terraform
        env:
          ARM_CLIENT_ID: ${{ steps.kvAction.outputs.ARM-CLIENT-ID }}
          ARM_CLIENT_SECRET: ${{ steps.kvAction.outputs.ARM-CLIENT-SECRET }}
          ARM_TENANT_ID: ${{ steps.kvAction.outputs.ARM-TENANT-ID }}
          TF_VAR_container_name: ${{ steps.kvAction.outputs.container-name }}
          TF_VAR_resource_group_name: ${{ steps.kvAction.outputs.resource-group-name }}
          TF_VAR_storage_account_name: ${{ steps.kvAction.outputs.storage-account-name }}
          TF_VAR_subscription_id: ${{ steps.kvAction.outputs.subscription-id }}
          TF_VAR_key: ${{ github.repository }}.tfstate
          TF_VAR_gh_repo: ${{ github.repository }}
          TF_VAR_app_insights_name: ${{ secrets.APP_INSIGHTS_NAME}}
          TF_VAR_app_insights_rg: ${{ secrets.APP_INSIGHTS_RG }}
          TF_VAR_image_version: latest #${{ github.run_id }}

        run: |
            echo "starting..."
            cd terraform
            terraform apply -auto-approve theplan